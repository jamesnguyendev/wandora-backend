openapi: 3.0.3
info:
  title: Wandora Backend API
  version: 1.0.0
  description: "Official OpenAPI (Swagger) specification for the Wandora backend. Generated from route and validator definitions in the repository."
servers:
  - url: http://localhost:4000/api/v1
tags:
  - name: auth
    description: Authentication endpoints
  - name: listings
    description: Listing management and search
  - name: bookings
    description: Booking creation and lookups
paths:
  /auth/register:
    post:
      tags: [auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/login:
    post:
      tags: [auth]
      summary: Login and obtain a JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token to use with Authorization Bearer <token>
                  userData:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /listings:
    get:
      tags: [listings]
      summary: Retrieve paginated listings
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingListResponse"

    post:
      tags: [listings]
      summary: Create a new listing (admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateListing"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /listings/search:
    get:
      tags: [listings]
      summary: Search listings by query
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

  /listings/{id}:
    get:
      tags: [listings]
      summary: Get a listing by id
      parameters:
        - $ref: "#/components/parameters/ListingId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags: [listings]
      summary: Update a listing (admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ListingId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateListing"
      responses:
        "200":
          description: Updated
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

    delete:
      tags: [listings]
      summary: Delete a listing (admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ListingId"
      responses:
        "200":
          description: Deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /bookings:
    post:
      tags: [bookings]
      summary: Create a booking for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBooking"
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /bookings/me:
    get:
      tags: [bookings]
      summary: Get bookings for the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ListingId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Listing UUID

  responses:
    BadRequest:
      description: Bad request - validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: Unauthorized - missing or invalid auth
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        code:
          type: integer
          example: 400
        message:
          type: string
        error:
          nullable: true
          type: object

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
        verified:
          type: boolean

    CreateListing:
      type: object
      properties:
        title:
          type: string
          minLength: 3
        description:
          type: string
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        priceBase:
          type: number
          minimum: 0
        type:
          type: string
          enum: [room, experience]
      required: [title, latitude, longitude, priceBase, type]

    Listing:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        priceBase:
          type: number
        type:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListingListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Listing"
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer

    CreateBooking:
      type: object
      properties:
        listingId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        totalPrice:
          type: number
      required: [listingId, startDate, endDate, totalPrice]

    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        listingId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        totalPrice:
          type: number
        createdAt:
          type: string
          format: date-time
